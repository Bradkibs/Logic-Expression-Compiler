/* automatically generated by rust-bindgen 0.71.1 */

pub const NodeType_NODE_VAR: NodeType = 0;
pub const NodeType_NODE_ASSIGN: NodeType = 1;
pub const NodeType_NODE_NOT: NodeType = 2;
pub const NodeType_NODE_AND: NodeType = 3;
pub const NodeType_NODE_OR: NodeType = 4;
pub const NodeType_NODE_XOR: NodeType = 5;
pub const NodeType_NODE_XNOR: NodeType = 6;
pub const NodeType_NODE_IMPLIES: NodeType = 7;
pub const NodeType_NODE_IFF: NodeType = 8;
pub const NodeType_NODE_EQUIV: NodeType = 9;
pub const NodeType_NODE_EXISTS: NodeType = 10;
pub const NodeType_NODE_FORALL: NodeType = 11;
pub const NodeType_NODE_BOOL: NodeType = 12;
pub type NodeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    pub type_: NodeType,
    pub name: *mut ::std::os::raw::c_char,
    pub left: *mut Node,
    pub right: *mut Node,
    pub bool_val: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Node"][::std::mem::size_of::<Node>() - 40usize];
    ["Alignment of Node"][::std::mem::align_of::<Node>() - 8usize];
    ["Offset of field: Node::type_"][::std::mem::offset_of!(Node, type_) - 0usize];
    ["Offset of field: Node::name"][::std::mem::offset_of!(Node, name) - 8usize];
    ["Offset of field: Node::left"][::std::mem::offset_of!(Node, left) - 16usize];
    ["Offset of field: Node::right"][::std::mem::offset_of!(Node, right) - 24usize];
    ["Offset of field: Node::bool_val"][::std::mem::offset_of!(Node, bool_val) - 32usize];
};
unsafe extern "C" {
    pub static mut parsed_expression: *mut Node;
}
unsafe extern "C" {
    pub fn create_variable_node(name: *mut ::std::os::raw::c_char) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_assignment_node(name: *mut ::std::os::raw::c_char, expr: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_not_node(expr: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_and_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_or_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_xor_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_xnor_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_implies_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_iff_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_equiv_node(left: *mut Node, right: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_exists_node(var: *mut ::std::os::raw::c_char, expr: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn create_forall_node(var: *mut ::std::os::raw::c_char, expr: *mut Node) -> *mut Node;
}
unsafe extern "C" {
    pub fn print_ast(root: *mut Node, indent: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn free_ast(root: *mut Node);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EvaluationStep {
    pub step_description: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EvaluationStep"][::std::mem::size_of::<EvaluationStep>() - 8usize];
    ["Alignment of EvaluationStep"][::std::mem::align_of::<EvaluationStep>() - 8usize];
    ["Offset of field: EvaluationStep::step_description"]
        [::std::mem::offset_of!(EvaluationStep, step_description) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EvaluationSteps {
    pub steps: *mut *mut EvaluationStep,
    pub step_count: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EvaluationSteps"][::std::mem::size_of::<EvaluationSteps>() - 16usize];
    ["Alignment of EvaluationSteps"][::std::mem::align_of::<EvaluationSteps>() - 8usize];
    ["Offset of field: EvaluationSteps::steps"]
        [::std::mem::offset_of!(EvaluationSteps, steps) - 0usize];
    ["Offset of field: EvaluationSteps::step_count"]
        [::std::mem::offset_of!(EvaluationSteps, step_count) - 8usize];
    ["Offset of field: EvaluationSteps::capacity"]
        [::std::mem::offset_of!(EvaluationSteps, capacity) - 12usize];
};
unsafe extern "C" {
    pub fn init_evaluation_steps() -> *mut EvaluationSteps;
}
unsafe extern "C" {
    pub fn add_evaluation_step(
        steps: *mut EvaluationSteps,
        description: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn free_evaluation_steps(steps: *mut EvaluationSteps);
}
unsafe extern "C" {
    pub fn evaluate_expression(expression: *const ::std::os::raw::c_char) -> *mut EvaluationSteps;
}
