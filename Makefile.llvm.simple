CC = gcc
CFLAGS = -c -g -Wall -I./C_Components -MMD -MP
LLVM_CFLAGS = $(shell llvm-config --cflags)
LLVM_LDFLAGS = $(shell llvm-config --ldflags)
LLVM_LIBS = $(shell llvm-config --libs core analysis bitwriter)
AR = ar
ARFLAGS = rcs
SHELL := /bin/bash

SRC_DIR = C_Components

LEXER_L = $(SRC_DIR)/lexer.l
PARSER_Y = $(SRC_DIR)/parser.y
LEXER_C = $(SRC_DIR)/lexer.c
PARSER_C = $(SRC_DIR)/parser.c
PARSER_H = $(SRC_DIR)/parser.h
AST_C = $(SRC_DIR)/ast.c
SYMBOL_TABLE_C = $(SRC_DIR)/symbol_table.c
SYMBOL_TABLE_H = $(SRC_DIR)/symbol_table.h
SEMANTIC_ANALYZER_C = $(SRC_DIR)/semantic_analyzer.c
LLVM_CODEGEN_C = $(SRC_DIR)/llvm_codegen_simple.c

OBJS = lexer.o parser.o ast.o symbol_table.o semantic_analyzer.o llvm_codegen.o

LIB = liblogic_llvm_simple.a

# Define main targets
.PHONY: all clean check-deps

# Main build target with all executables
all: check-deps $(LIB) lec_compiler_llvm

-include $(OBJS:.o=.d)

# Bison rule
$(PARSER_C) $(PARSER_H): $(PARSER_Y)
	cd $(SRC_DIR) && bison -d -o parser.c parser.y

# Flex rule â€” depends on parser.h
$(LEXER_C): $(LEXER_L) $(PARSER_H)
	cd $(SRC_DIR) && flex -o lexer.c lexer.l

# Object files
lexer.o: $(LEXER_C)
	$(CC) $(CFLAGS) -o $@ $(LEXER_C)

parser.o: $(PARSER_C) $(PARSER_H) $(SRC_DIR)/ast.h
	$(CC) $(CFLAGS) -o $@ $(PARSER_C)

ast.o: $(AST_C) $(SRC_DIR)/ast.h $(SYMBOL_TABLE_H)
	$(CC) $(CFLAGS) -o $@ $(AST_C)

symbol_table.o: $(SYMBOL_TABLE_C) $(SYMBOL_TABLE_H)
	$(CC) $(CFLAGS) -o $@ $(SYMBOL_TABLE_C)

semantic_analyzer.o: $(SEMANTIC_ANALYZER_C) $(SRC_DIR)/semantic_analyzer.h
	$(CC) $(CFLAGS) -o $@ $(SEMANTIC_ANALYZER_C)

llvm_codegen.o: $(LLVM_CODEGEN_C) $(SRC_DIR)/llvm_codegen.h
	$(CC) $(CFLAGS) $(LLVM_CFLAGS) -o $@ $(LLVM_CODEGEN_C)

# Static library
$(LIB): $(OBJS)
	$(AR) $(ARFLAGS) $@ $(OBJS)

clean:
	rm -f $(OBJS) *.d *.o $(LIB) lec_compiler_llvm *.bc output

# Check dependencies
check-deps:
	@if ! command -v llvm-config > /dev/null || ! command -v clang > /dev/null || ! command -v bison > /dev/null || ! command -v flex > /dev/null; then \
		echo "Required dependencies missing. Running install script..."; \
		./install.sh; \
	fi

# LLVM Logical Expression Compiler executable
lec_compiler_llvm: lec_compiler_llvm.c $(LIB)
	$(CC) -g -Wall -o lec_compiler_llvm lec_compiler_llvm.c -I. -L. -llogic_llvm_simple -lm $(LLVM_CFLAGS) $(LLVM_LDFLAGS) $(LLVM_LIBS)
